'''
Business: API –¥–ª—è –ø—Ä–∏–µ–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
Args: event - dict —Å httpMethod, body (JSON —Å –ø–æ–ª—è–º–∏: name, email, phone, message, type)
      context - –æ–±—ä–µ–∫—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ request_id, function_name
Returns: HTTP response dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
'''
import json
import os
from typing import Dict, Any, Optional
from pydantic import BaseModel, Field, EmailStr, ValidationError
import psycopg2
from psycopg2.extras import RealDictCursor
import requests


class LeadRequest(BaseModel):
    name: str = Field(..., min_length=1, max_length=255)
    email: Optional[EmailStr] = None
    phone: Optional[str] = Field(None, max_length=50)
    message: Optional[str] = None
    business_type: Optional[str] = Field(None, max_length=100)
    type: str = Field(default='lead', max_length=50)


def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    # Parse request body
    body_data = json.loads(event.get('body', '{}'))
    
    # Validate with Pydantic
    lead_data = LeadRequest(**body_data)
    
    # Connect to database
    db_url = os.environ.get('DATABASE_URL')
    
    conn = psycopg2.connect(db_url)
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    # Insert lead into database
    insert_query = '''
        INSERT INTO leads (name, email, phone, message, type, status, created_at, updated_at)
        VALUES (%s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING id, name, email, phone, created_at
    '''
    
    message_text = lead_data.message or ''
    if lead_data.business_type:
        message_text = f"–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: {lead_data.business_type}\n\n{message_text}"
    
    cur.execute(
        insert_query,
        (
            lead_data.name,
            lead_data.email,
            lead_data.phone,
            message_text,
            lead_data.type,
            'new'
        )
    )
    
    result = cur.fetchone()
    conn.commit()
    
    cur.close()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    telegram_chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    if telegram_token and telegram_chat_id:
        telegram_message = f"""
üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{result['id']}

üë§ –ò–º—è: {lead_data.name}
üìß Email: {lead_data.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {lead_data.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
{f"üè¢ –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: {lead_data.business_type}" if lead_data.business_type else ""}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{lead_data.message or '–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}

‚è∞ –í—Ä–µ–º—è: {result['created_at'].strftime('%d.%m.%Y %H:%M')}
"""
        
        telegram_url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
        telegram_payload = {
            'chat_id': telegram_chat_id,
            'text': telegram_message,
            'parse_mode': 'HTML'
        }
        
        try:
            requests.post(telegram_url, json=telegram_payload, timeout=5)
        except Exception as e:
            pass
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({
            'success': True,
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
            'lead_id': result['id'],
            'created_at': result['created_at'].isoformat()
        }),
        'isBase64Encoded': False
    }